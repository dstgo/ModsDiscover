// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package handler

import (
	"github.com/dstgo/tracker/internal/conf"
	"github.com/dstgo/tracker/internal/data"
	"github.com/dstgo/tracker/internal/data/cache"
	"github.com/dstgo/tracker/internal/handler/email"
	"github.com/dstgo/tracker/internal/handler/system"
	"github.com/dstgo/tracker/internal/handler/user"
	"github.com/dstgo/tracker/pkg/ginx"
)

import (
	_ "github.com/dstgo/tracker/internal/handler/docs"
)

// Injectors from wire.go:

//go:generate wire gen
func setupHandlerRouter(appConf *conf.AppConf, router *ginx.RouterGroup, datasource *data.DataSource) (Router, func(), error) {
	sender, cleanup, err := email.NewSender(appConf)
	if err != nil {
		return Router{}, nil, err
	}
	redisEmailCodeCache := cache.NewRedisEmailCodeCache(datasource)
	emailHandler := email.NewEmailHandler(appConf, sender, redisEmailCodeCache)
	handler := email.Handler{
		Email: emailHandler,
	}
	handlerRouter := email.SetupRouter(router, handler)
	pingApp := system.NewPingLogic(appConf)
	pingHandler := system.NewPingHandler(pingApp)
	authenticator := system.NewAuthenticator(appConf, datasource, redisEmailCodeCache)
	authHandler := system.NewAuthHandler(authenticator)
	roleEnforcer := system.NewRoleEnforcer(datasource)
	roleHandler := system.NewRoleHandler(roleEnforcer)
	apiKey := system.NewAPIKey(datasource)
	apiKeyHandler := system.NewAPIKeyHandler(apiKey)
	dictResolver := system.NewDictResolver(datasource)
	dictHandler := system.NewDictHandler(dictResolver)
	systemHandler := system.Handler{
		Ping: pingHandler,
		Auth: authHandler,
		Role: roleHandler,
		Key:  apiKeyHandler,
		Dict: dictHandler,
	}
	systemHandlerRouter := system.SetupRouter(router, systemHandler)
	userInfo := user.NewUserInfo(datasource)
	userModify := user.NewUserModify(datasource, userInfo)
	infoHandler := user.NewInfoHandler(userInfo, userModify)
	adminHandler := user.NewAdminHandler(userInfo, userModify)
	userHandler := user.Handler{
		Info:  infoHandler,
		Admin: adminHandler,
	}
	userHandlerRouter := user.SetupRouter(router, userHandler)
	router2 := Router{
		Email:  handlerRouter,
		System: systemHandlerRouter,
		User:   userHandlerRouter,
	}
	return router2, func() {
		cleanup()
	}, nil
}
