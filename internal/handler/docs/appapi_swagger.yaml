basePath: /api/v1
definitions:
  auth.APIKey:
    properties:
      expiredAt:
        type: integer
      key:
        type: string
      name:
        type: string
    type: object
  auth.ForgotPasswordOption:
    properties:
      code:
        description: auth code get from user binding email
        example: F294484D
        type: string
      password:
        description: length of the password must be in range [10,30]
        example: "123456789"
        type: string
    type: object
  auth.KeyCreateOption:
    properties:
      expiredAt:
        type: integer
      name:
        type: string
      perms:
        items:
          type: integer
        type: array
    type: object
  auth.LoginOption:
    properties:
      password:
        description: length of the password must be in range [10,30]
        example: "0123456789"
        type: string
      persistent:
        example: true
        type: boolean
      username:
        description: length of the username must be in range [6,20], and username
          must be Alphanumeric
        example: dstadmin
        type: string
    type: object
  auth.RegisterOption:
    properties:
      code:
        description: 8-digit auth code get from user binding email, and it must be
          Alphanumeric
        example: F294484D
        type: string
      password:
        description: length of the password must be in range [10,30]
        example: "0123456789"
        type: string
      persistent:
        example: true
        type: boolean
      username:
        description: length of the username must be in range [6,20], and username
          must be Alphanumeric
        example: dstadmin
        type: string
    type: object
  auth.Token:
    properties:
      refresh:
        description: refresh token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6InN0cmFuZ2VyIiwidXNlcklkIjoiMDA1YjQzOTctOTRjMi00YWZjLWIzNTEtNWIzY2VkNzI4MDkzIiwiaXNzIjoid2lsc29uIiwiZXhwIjoxNjk3MzI0ODY4LCJpYXQiOjE2OTcyODg4NjgsImp0aSI6IjdkZDI4NDZlLTFkZjEtNDBkMS04YmZlLTA3ZGI3ZmE4NmFhYiJ9.HnAaz-WOmugqfdz_oXphsJY_zQl3FCzrtYCm90WJgGU
        type: string
      token:
        description: access token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VybmFtZSI6InN0cmFuZ2VyIiwidXNlcklkIjoiMDA1YjQzOTctOTRjMi00YWZjLWIzNTEtNWIzY2VkNzI4MDkzIiwiaXNzIjoid2lsc29uIiwiZXhwIjoxNjk3MzI0ODY4LCJpYXQiOjE2OTcyODg4NjgsImp0aSI6IjdkZDI4NDZlLTFkZjEtNDBkMS04YmZlLTA3ZGI3ZmE4NmFhYiJ9.HnAaz-WOmugqfdz_oXphsJY_zQl3FCzrtYCm90WJgGU
        type: string
    type: object
  dict.DictDataDetail:
    properties:
      createdAt:
        type: integer
      enable:
        type: boolean
      id:
        type: integer
      key:
        type: string
      label:
        type: string
      order:
        type: integer
      type:
        type: integer
      updatedAt:
        type: integer
      value: {}
    type: object
  dict.DictDataInfo:
    properties:
      key:
        type: string
      label:
        type: string
      type:
        type: integer
      value: {}
    type: object
  dict.DictDataSaveOption:
    properties:
      dictId:
        type: integer
      key:
        type: string
      name:
        type: string
      order:
        type: integer
      type:
        type: integer
      value:
        type: string
    type: object
  dict.DictDataUpdateOption:
    properties:
      enable:
        type: boolean
      id:
        type: integer
      key:
        type: string
      name:
        type: string
      order:
        type: integer
      type:
        type: integer
      value:
        type: string
    type: object
  dict.DictDetail:
    properties:
      code:
        type: string
      createdAt:
        type: integer
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: integer
    type: object
  dict.DictSaveOption:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  dict.DictUpdateOption:
    properties:
      code:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  role.CreatePermOption:
    properties:
      action:
        description: how to access the object
        example: POST
        type: string
      group:
        description: permission group
        example: UserGroup
        type: string
      name:
        example: updateUser
        type: string
      object:
        description: define the object will be accessed
        example: /user/update
        type: string
      tag:
        description: tag of permission
        example: AppAPI
        type: string
    type: object
  role.CreateRoleOption:
    properties:
      code:
        description: role code, must be alpha numeric
        example: ADMIN
        type: string
      name:
        description: role name
        example: admin
        type: string
    type: object
  role.GrantOption:
    properties:
      permId:
        items:
          type: integer
        type: array
      roleId:
        example: 1
        type: integer
      tag:
        example: AppApi
        type: string
    type: object
  role.PermGroup:
    properties:
      group:
        description: group name
        example: user group
        type: string
      perms:
        items:
          $ref: '#/definitions/role.PermInfo'
        type: array
    type: object
  role.PermInfo:
    properties:
      action:
        description: how to access the object
        example: POST
        type: string
      group:
        description: permission group
        example: admin
        type: string
      id:
        description: permission id
        example: 1
        type: integer
      name:
        description: permission name
        example: updateUser
        type: string
      object:
        description: define the object will be accessed
        example: /user/update
        type: string
      tag:
        description: tag of permissions
        example: AppAPI
        type: string
    type: object
  role.RoleInfo:
    properties:
      code:
        description: role code, must be alpha numeric
        example: ADMIN
        type: string
      id:
        description: role id
        example: 1
        type: integer
      name:
        description: role name
        example: admin
        type: string
    type: object
  role.UpdatePermOption:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: updateUser
        type: string
    type: object
  role.UpdateRoleOption:
    properties:
      id:
        example: 1
        type: integer
      name:
        description: role name
        example: admin
        type: string
    type: object
  system.PingReply:
    properties:
      reply:
        example: hello wendy! Now is 2023-10-17 11:07:21.696 +08:00.
        type: string
    type: object
  types.Response:
    properties:
      code:
        example: 2000
        type: integer
      data: {}
      err:
        type: string
      msg:
        example: operation success
        type: string
    type: object
  user.CreateUserOption:
    properties:
      email:
        description: new email
        example: jack@google.com
        type: string
      password:
        description: new password
        example: "123456"
        type: string
      roles:
        description: new roles
        items:
          type: string
        type: array
      username:
        description: new username
        example: jack
        type: string
    type: object
  user.Info:
    properties:
      createdAt:
        example: 947416200
        type: integer
      email:
        example: jacklove@lol.com
        type: string
      roles:
        items:
          $ref: '#/definitions/role.RoleInfo'
        type: array
      username:
        example: jack
        type: string
      uuid:
        example: 55BBA4ED-18D3-790F-EABF-A5330E527586
        type: string
    type: object
  user.SaveUserDetailOption:
    properties:
      email:
        description: new email
        example: jack@google.com
        type: string
      password:
        description: new password
        example: "123456"
        type: string
      roles:
        description: new roles
        items:
          type: string
        type: array
      username:
        description: new username
        example: jack
        type: string
      uuid:
        example: 55BBA4ED-18D3-790F-EABF-A5330E527586
        type: string
    type: object
  user.UpdateInfoOption:
    properties:
      email:
        description: new email
        example: jack@google.com
        type: string
      password:
        description: new password
        example: "123456"
        type: string
      username:
        description: new username
        example: jack
        type: string
    type: object
info:
  contact:
    name: dstgo
    url: https://github.com/dstgo
  description: |-
    app http api documentation, use the Bearer Token to authenticate
    It should be noted that when using swagger doc for API debugging, the Token needs to be manually prefixed with Bearer.
  license:
    name: MIT LICENSE
    url: https://mit-license.org/
  title: App Internal API Documentation
  version: v1.0.0
paths:
  /auth/forgotpwd:
    post:
      consumes:
      - application/json
      description: |-
        [guest]
        forgot password
      parameters:
      - description: Account ID
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      summary: ForgotPassword
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: |-
        [guest]
        if login success, return jwt token
      parameters:
      - description: comment
        in: body
        name: loginBody
        required: true
        schema:
          $ref: '#/definitions/auth.LoginOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/auth.Token'
              type: object
      summary: Login
      tags:
      - auth
  /auth/logout:
    delete:
      consumes:
      - application/json
      description: |-
        [user]
        user logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - auth
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: |-
        [guest]
        carry refresh token in query params, access token in header
        if refresh-token expired , TokenRefresher will not refresh token [4012]
        else if access-token has expired after delay duration, TokenRefresher will not refresh token [4012]
        else if access-token has expired before delay duration, TokenRefresher will issue a new access-token [2005]
        else if access-token has not expired, TokenRefresher will renewal the 1/10 access-token ttl per time  [2005]
        else if access-token has not expired, and ttl >= 2 * conf.JwtConf.Exp, TokenRefresher will not refresh token [4013]
      parameters:
      - description: refresh token
        in: query
        name: refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/auth.Token'
              type: object
      summary: Refresh
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: |-
        [guest]
        user register api
      parameters:
      - description: comment
        in: body
        name: registerBody
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      summary: Register
      tags:
      - auth
  /dict/create:
    post:
      consumes:
      - application/json
      description: create dict
      parameters:
      - description: DictSaveOption
        in: body
        name: DictSaveOption
        required: true
        schema:
          $ref: '#/definitions/dict.DictSaveOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: CreateDict
      tags:
      - dict
  /dict/data/create:
    post:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: DictDataSaveOption
        in: body
        name: DictDataSaveOption
        required: true
        schema:
          $ref: '#/definitions/dict.DictDataSaveOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: CreateDictData
      tags:
      - dict
  /dict/data/list:
    get:
      consumes:
      - application/json
      description: list dict data
      parameters:
      - in: query
        name: code
        type: string
      - description: if is reverse order
        example: true
        in: query
        name: desc
        type: boolean
      - description: page
        example: 1
        in: query
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - description: size of page
        example: 10
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dict.DictDataDetail'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: ListDictData
      tags:
      - dict
  /dict/data/remove:
    delete:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: RemoveDictData
      tags:
      - dict
  /dict/data/update:
    post:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: DictDataUpdateOption
        in: body
        name: DictDataUpdateOption
        required: true
        schema:
          $ref: '#/definitions/dict.DictDataUpdateOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: UpdateDictData
      tags:
      - dict
  /dict/info:
    get:
      consumes:
      - application/json
      description: get dict data info by code
      parameters:
      - in: query
        name: code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dict.DictDataInfo'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: GetDictInfo
      tags:
      - dict
  /dict/list:
    get:
      consumes:
      - application/json
      description: list dict pages
      parameters:
      - description: if is reverse order
        example: true
        in: query
        name: desc
        type: boolean
      - description: page
        example: 1
        in: query
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - description: size of page
        example: 10
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dict.DictDetail'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: ListDict
      tags:
      - dict
  /dict/remove:
    delete:
      consumes:
      - application/json
      description: remove dict
      parameters:
      - in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: RemoveDict
      tags:
      - dict
  /dict/update:
    post:
      consumes:
      - application/json
      description: update dict
      parameters:
      - description: DictUpdateOption
        in: body
        name: DictUpdateOption
        required: true
        schema:
          $ref: '#/definitions/dict.DictUpdateOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: UpdateDict
      tags:
      - dict
  /email/code:
    get:
      consumes:
      - application/json
      description: auth code email api
      parameters:
      - description: email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      summary: SendCodeEmail
      tags:
      - email
  /key/create:
    post:
      consumes:
      - application/json
      description: create specified user api key
      parameters:
      - description: KeyCreateOption
        in: body
        name: KeyCreateOption
        required: true
        schema:
          $ref: '#/definitions/auth.KeyCreateOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: CreateAPIKey
      tags:
      - key
  /key/list:
    get:
      consumes:
      - application/json
      description: list specified user api keys
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/auth.APIKey'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: ListAPIKeys
      tags:
      - key
  /key/remove:
    delete:
      consumes:
      - application/json
      description: remove specified api key
      parameters:
      - in: query
        name: key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: RemoveAPIKey
      tags:
      - key
  /perm/create:
    post:
      consumes:
      - application/json
      description: |-
        [admin]
        create a new permission
      parameters:
      - description: create perm
        in: body
        name: createPerm
        required: true
        schema:
          $ref: '#/definitions/role.CreatePermOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: CreatePermission
      tags:
      - role
  /perm/list:
    get:
      consumes:
      - application/json
      description: |-
        [admin]
        Get Permission list by page
      parameters:
      - description: if is reverse order
        example: true
        in: query
        name: desc
        type: boolean
      - description: page
        example: 1
        in: query
        name: page
        type: integer
      - example: admin
        in: query
        name: search
        type: string
      - description: size of page
        example: 10
        in: query
        name: size
        type: integer
      - example: appapi
        in: query
        name: tag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/role.PermInfo'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: GetPermList
      tags:
      - role
  /perm/remove:
    delete:
      consumes:
      - application/json
      description: |-
        [admin]
        remove the specified permission
      parameters:
      - in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: RemovePermission
      tags:
      - role
  /perm/update:
    post:
      consumes:
      - application/json
      description: |-
        [admin]
        update the specified permission info
      parameters:
      - description: update perm
        in: body
        name: updatePermOpt
        required: true
        schema:
          $ref: '#/definitions/role.UpdatePermOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: UpdatePermission
      tags:
      - role
  /ping:
    get:
      consumes:
      - application/json
      description: |-
        [guest]
        test app api if is accessible
      parameters:
      - description: name must be one of [wilson, wendy]
        example: wilson
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/system.PingReply'
              type: object
      summary: Ping
      tags:
      - system
  /pong:
    get:
      consumes:
      - application/json
      description: |-
        [guest]
        test app api authentication if is work
      parameters:
      - description: name must be one of [wilson, wendy]
        example: wilson
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      summary: Pong
      tags:
      - system
  /role/create:
    post:
      consumes:
      - application/json
      description: |-
        [admin]
        create a new role
      parameters:
      - description: create role
        in: body
        name: createRole
        required: true
        schema:
          $ref: '#/definitions/role.CreateRoleOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: CreateRole
      tags:
      - role
  /role/grant:
    post:
      consumes:
      - application/json
      description: |-
        [admin]
        grant permissions for the specified role
      parameters:
      - description: grant role
        in: body
        name: GrantOption
        required: true
        schema:
          $ref: '#/definitions/role.GrantOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: GrantRolePerms
      tags:
      - role
  /role/list:
    get:
      consumes:
      - application/json
      description: |-
        [admin]
        get role list by page
      parameters:
      - description: if is reverse order
        example: true
        in: query
        name: desc
        type: boolean
      - description: page
        example: 1
        in: query
        name: page
        type: integer
      - example: admin
        in: query
        name: search
        type: string
      - description: size of page
        example: 10
        in: query
        name: size
        type: integer
      - example: appapi
        in: query
        name: tag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/role.RoleInfo'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: GetRoleList
      tags:
      - role
  /role/perms:
    get:
      consumes:
      - application/json
      description: |-
        [admin]
        get permissions list belong to role
      parameters:
      - in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/role.PermGroup'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: GetRolePerms
      tags:
      - role
  /role/remove:
    delete:
      consumes:
      - application/json
      description: |-
        [admin]
        remove a role,and its permission record will be deleted too
      parameters:
      - in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: RemoveRole
      tags:
      - role
  /role/update:
    post:
      consumes:
      - application/json
      description: |-
        [admin]
        update the specified role info
      parameters:
      - description: update role
        in: body
        name: updateRole
        required: true
        schema:
          $ref: '#/definitions/role.UpdateRoleOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: UpdateRole
      tags:
      - role
  /user/admin/create:
    post:
      consumes:
      - application/json
      description: |-
        [admin]
        create new user
      parameters:
      - description: CreateUserOption
        in: body
        name: createOpt
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: CreateUser
      tags:
      - user
  /user/admin/list:
    get:
      consumes:
      - application/json
      description: |-
        [admin]
        get specific user list
      parameters:
      - description: if is reverse order
        example: true
        in: query
        name: desc
        type: boolean
      - description: specified field
        example: email
        in: query
        name: order
        type: string
      - description: page
        example: 1
        in: query
        name: page
        type: integer
      - description: search text, should be of one username or email
        example: jacklove
        in: query
        name: search
        type: string
      - description: size of page
        example: 10
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/user.Info'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: GetUserInfoList
      tags:
      - user
  /user/admin/profile:
    get:
      consumes:
      - application/json
      description: |-
        [admin]
        get specified user information
      parameters:
      - in: query
        name: uuid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: GetSpecUserInfo
      tags:
      - user
    post:
      consumes:
      - application/json
      description: |-
        [admin]
        save specified user information
      parameters:
      - description: updateInfoOption
        in: body
        name: updateInfoOption
        required: true
        schema:
          $ref: '#/definitions/user.SaveUserDetailOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: SaveUser
      tags:
      - user
  /user/admin/remove:
    delete:
      consumes:
      - application/json
      description: |-
        [admin]
        Remove the specific user
      parameters:
      - in: query
        name: uuid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: RemoveUser
      tags:
      - user
  /user/profile:
    get:
      consumes:
      - application/json
      description: |-
        [user]
        get own user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/user.Info'
              type: object
      security:
      - BearerAuth: []
      summary: GetUserInfo
      tags:
      - user
    post:
      consumes:
      - application/json
      description: |-
        [user]
        update own user info
      parameters:
      - description: updateInfoOption
        in: body
        name: updateInfoOption
        required: true
        schema:
          $ref: '#/definitions/user.UpdateInfoOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - BearerAuth: []
      summary: UpdateUserInfo
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
