[route]
# System routing
sys.group = "System"
sys.ping = "Ping test"
sys.pong = "Pong test"
# Authentication routing
auth.group = "Authentication"
auth.login = "User login"
auth.register = "User Registration"
auth.logout = "User logged out"
auth.forgotPasswd = "User retrieves password"
auth.refresh = "Refresh token"
# User personal routing
user.profile.group = "Personal Information"
user.profile.info = "Query information"
user.profile.save = "Update information"
# User management routing
user.admin.group = "User Management"
user.admin.info = "Query user information"
user.admin.list = "Query user list"
user.admin.create = "Create user"
user.admin.save = "Update User"
user.admin.remove = "Remove user"
# Email routing
email.group = "Email"
email.code = "Send verification code email"
email.notify = "Send notification email"
#role routing
role.group = "role"
role.list = "Get role list"
role.perms = "Get role permission list"
role.create = "Create role"
role.update = "Update role"
role.grant = "Role Grant"
role.remove = "Remove role"
#Permission routing
perm.group = "Permissions"
perm.list = "Get permission list"
perm.create = "Create permission"
perm.update = "Update permissions"
perm.remove = "Remove Permission"
# APIKey routing
key.group = "OpenAPI"
key.list = "Get key list"
key.create = "Create key"
key.remove = "Delete key"



# Data verification part
[validate]
isnil = "must be null"
isempty = "Must be the default value"
required = "It is a required value and cannot be empty"
empty = "cannot be zero value"
notnil = "cannot be empty"
oneof = "Must be one of several values [%v]"
notoneof = "Cannot be one of several values [%v]"
gt = "Must be greater than %v"
gte = "Must be greater than or equal to %v"
lt = "Must be less than %v"
lte = "Must be less than or equal to %v"
eq = "Must equal %v"
match = "Must match regular expression %v"
multiple = "Must be a multiple of %v"
date = "Must be a valid date format"

[validate.length]
range = "The length must be between %v and %v"
max = "Length must be less than or equal to %v"
min = "The length must be greater than or equal to %v"
eq = "Length must be equal to %v"

[validate.string]
email = "Must be a valid email format"
url = "Must be a valid URL"
requrl = "Must be a valid request URL"
requri = "Must be a valid request URI"
alpha = "can only contain English letters"
digit = "can only contain digits"
alphanum = "can only contain English letters and numbers"
unicode = "can only contain unicode alphabetic characters"
unicodenum = "can only contain unicode decimal numbers"
unicodeletternum = "can only contain unicode letters and numbers"
unicodenumch = "Can only contain unicode numeric characters"
lower = "Must be a lowercase string"
upper = "Must be an uppercase string"
hex = "Must be a hexadecimal number"
hexcolor = "Must be hexadecimal color"
rgb = "Must be RGB format color code"
int = "Must be an integer number"
float = "Must be a floating point number"
uuidv3 = "Must be a valid UUID v3"
uuidv4 = "Must be a valid UUID v4"
uuidv5 = "Must be a valid UUID v5"
uuid = "Must be a valid UUID"
creditcard = "Must be a valid credit card number"
isbn10 = "Must comply with ISBN-10 specifications"
isbn13 = "Must comply with ISBN-13 specifications"
isbn = "Must comply with ISBN specifications"
json = "Must conform to JSON format"
ascii = "can only contain ASCII characters"
printable = "can only contain printable characters"
multibyte = "Can only contain multi-byte characters"
fullwidth = "Can only contain full-width characters"
halfwidth = "Can only contain half-width characters"
fullhalfwidth = "Can only contain full-width and half-width characters"
base64 = "Must be Base64 encoded"
base64uri = "Must be a base64-encoded data URI"
e164 = "Must be a valid E164 number"
2code = "Must be a valid two-letter country code"
3code = "Must be a three-letter country code"
iso4217code = "Must be a valid ISO4217 currency code"
dial = "Must be a valid Dial string"
mac = "Must be a valid MAC address"
ip = "Must be a valid IP address"
ipv4 = "Must be a valid IPv4 address"
ipv6 = "Must be a valid IPv6 address"
subdomain = "Must be a valid subdomain"
domain = "Must be a valid domain name"
dns = "Must be a valid DNS name"
host = "Must be a valid hostname"
port = "Must be a valid port"
mongoid = "Must be a valid hex-encoded MongoDB ObjectId"
latitude = "Must be a valid latitude"
longitude = "Must be a valid longitude"
ssn = "Must be a valid SSN code"
version = "Must be a valid semantic version"

# Custom verification rules
[rule]
perm.object = "Permission subject can only consist of alphanumeric characters, forward slashes and underscores"


# Field Name
[field]
name = "name"
email = "email"
username = "username"
password = "password"
phone = "Mobile phone number"
age = "age"
userid = "User ID"
uuid = "User Unique Identifier"
code = "verification code"
page = "number of pages"
pagesize = "page capacity"
perm.name = "Permission Name"
perm.id = "Permission Identifier"
perm.list = "Permission List"
perm.object = "Permission Subject"
perm.action = "Action Restrictions"
perm.tag = "Permission Tag"
role.id = "role identifier"
role.name = "Role name"
role.code = "role code"
role.list = "Role List"
token.access = "Authentication token"
token.refresh = "Refresh token"

# Error message section
[op]
ok = "Operation successful"
fail = "Operation failed"
query.ok = "Query successful"
query.fail = "Query failed"
create.ok = "Created successfully"
create.fail = "Creation failed"
update.ok = "Update successful"
update.fail = "Update failed"
delete.ok = "Delete successfully"
delete.fail = "Deletion failed"

[err]
unknown = "Unknown error"
badparams = "Parameter verification failed"
forbidden = "no access"
unauthorized = "Authentication failed"
database = "Database error"
filesystem = "File IO error"
network = "Network error"
program = "Program error"
notfound = "The accessed resource does not exist"
methodnotallowed = "Unsupported HTTP method"
internal = "Server internal error"

[email]
code.subject = "Verification code email from dstgo, please check it in time"
code.expired = "Verification code has expired"
sendFail = "Failed to send email"
sendOk = "Email has been sent"

[jwt]
parsed.failed = "User authentication failed, please try to log in again"
issue.failed = "Certificate issuance failed"
expired = "User credentials expired, please log in again"
refresh = "User certificate has expired, please apply again"
invalid = "Invalid credentials"
redundant = "Credentials do not need to be updated"

[key]
invalid = "Invalid key"
noperm = "Insufficient key permissions"
nopexp = "Invalid expiration time"

[auth]
loginFail = "Login failed"
loginOk = "Login successful"
registerFail = "Registration failed"
registerOk = "Registration successful"
logoutFail = "Logout failed"
logoutOk = "Logout successfully"
changePasswdFail = "Password change failed"
changePasswdOk = "Password changed successfully"
refresh.failed = "Token refresh failed"
refresh.ok = "Token refreshed successfully"

[user]
notfound = "User does not exist"
alreadyExist = "User already exists"
wrongPassword = "Wrong password"

[role]
notfound = "The role does not exist"
codeConflict = "The same role code already exists"
invalidList = "Infinite character list"

[perm]
notfound = "Permission does not exist"
invalidList = "Invalid permission list"
conflict = "The same permission definition already exists"
noPerm = "The current user role does not have permission to access"